<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Roc&#39;s Tech Log</title>
  
  
  <link href="/TechLog/atom.xml" rel="self"/>
  
  <link href="http://qinroc.github.com/TechLog/"/>
  <updated>2020-01-06T13:31:41.733Z</updated>
  <id>http://qinroc.github.com/TechLog/</id>
  
  <author>
    <name>Qin Peng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>日语分词</title>
    <link href="http://qinroc.github.com/TechLog/2020/01/04/true/"/>
    <id>http://qinroc.github.com/TechLog/2020/01/04/true/</id>
    <published>2020-01-03T16:00:00.000Z</published>
    <updated>2020-01-06T13:31:41.733Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分词库"><a href="#分词库" class="headerlink" title="分词库"></a>分词库</h2><p>Google和Github上以“japanese segmentation”为关键词搜索：</p><ul><li><a href="https://github.com/go-ego/gse" target="_blank" rel="noopener">gse</a> #Go</li></ul><blockquote><p>Go efficient text segmentation @vcaesar; support english, chinese, japanese and other. Go 语言高性能分词</p></blockquote><ul><li><a href="https://github.com/ikawaha/kagome" target="_blank" rel="noopener">kagome</a> #Go</li></ul><blockquote><p>Self-contained Japanese Morphological Analyzer written in pure Go</p></blockquote><ul><li><a href="https://github.com/WorksApplications/Sudachi" target="_blank" rel="noopener">Sudachi</a> #Java #Python</li></ul><blockquote><p>A Japanese Tokenizer for Business</p></blockquote><ul><li><a href="https://github.com/WorksApplications/SudachiPy" target="_blank" rel="noopener">SudachiPy</a></li></ul><blockquote><p>Python version of Sudachi, a Japanese tokenizer.</p></blockquote><ul><li><a href="https://github.com/WorksApplications/SudachiDict" target="_blank" rel="noopener">SudachiDict</a></li></ul><blockquote><p>A lexicon for Sudachi</p></blockquote><ul><li><a href="https://github.com/taishi-i/nagisa" target="_blank" rel="noopener">nagisa</a> #Python</li></ul><blockquote><p>A Japanese tokenizer based on recurrent neural networks</p></blockquote><ul><li><a href="https://www.atilika.org/" target="_blank" rel="noopener">Kuromoji</a><blockquote><p>Kuromoji is an open source Japanese morphological analyzer written in Java.</p></blockquote></li></ul><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>选用SudachiPy进行分词。</p><h2 id="安装SudachiPy库"><a href="#安装SudachiPy库" class="headerlink" title="安装SudachiPy库"></a>安装SudachiPy库</h2><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip install SudachiPy</span><br></pre></td></tr></table></figure><p>出现的问题:</p><blockquote><p>x86_64-linux-gnu-gcc: error trying to exec ‘cc1plus’: execvp: No such file or directory</p></blockquote><p><a href="https://stackoverflow.com/questions/22414109/g-error-trying-to-exec-cc1plus-execvp-no-such-file-or-directory/27944551#27944551" target="_blank" rel="noopener">g++: error trying to exec ‘cc1plus’: execvp: No such file or directory</a></p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install g++</span><br><span class="line">python3 -m pip install https://object-storage.tyo2.conoha.io/v1/nc_2520839e1f9641b08211a5c85243124a/sudachi/SudachiDict_core-20191224.tar.gz</span><br></pre></td></tr></table></figure><h2 id="安装词典"><a href="#安装词典" class="headerlink" title="安装词典"></a>安装词典</h2><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip install https://object-storage.tyo2.conoha.io/v1/nc_2520839e1f9641b08211a5c85243124a/sudachi/SudachiDict_core-20191224.tar.gz</span><br></pre></td></tr></table></figure><p>出现的问题：网络不佳，自行下载后安装</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip install ./SudachiDict_core-20191224.tar.gz.tar</span><br></pre></td></tr></table></figure><h2 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h2><p>SudachiPy的使用按照<a href="https://github.com/WorksApplications/SudachiPy" target="_blank" rel="noopener">官方示例</a>即可。<br>我使用的是SplitMode.B。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> sudachipy <span class="hljs-keyword">import</span> tokenizer</span><br><span class="line"><span class="hljs-keyword">from</span> sudachipy <span class="hljs-keyword">import</span> dictionary</span><br><span class="line"></span><br><span class="line">tokenizer_obj = dictionary.Dictionary().create()</span><br><span class="line">mode = tokenizer.Tokenizer.SplitMode.B</span><br><span class="line">list = [m.surface() <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> tokenizer_obj.tokenize(<span class="hljs-string">"国家公務員"</span>, mode)]</span><br><span class="line">print(list)</span><br><span class="line"><span class="hljs-comment"># =&gt; ['国家', '公務員']</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;分词库&quot;&gt;&lt;a href=&quot;#分词库&quot; class=&quot;headerlink&quot; title=&quot;分词库&quot;&gt;&lt;/a&gt;分词库&lt;/h2&gt;&lt;p&gt;Google和Github上以“japanese segmentation”为关键词搜索：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href
      
    
    </summary>
    
    
      <category term="Japanese" scheme="http://qinroc.github.com/TechLog/tags/Japanese/"/>
    
      <category term="Segmentation" scheme="http://qinroc.github.com/TechLog/tags/Segmentation/"/>
    
  </entry>
  
  <entry>
    <title>Blog 1.0.0</title>
    <link href="http://qinroc.github.com/TechLog/2019/03/24/true/"/>
    <id>http://qinroc.github.com/TechLog/2019/03/24/true/</id>
    <published>2019-03-24T03:31:48.000Z</published>
    <updated>2020-01-06T13:31:41.733Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Blog"><a href="#Blog" class="headerlink" title="Blog"></a>Blog</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>形式：自建静态博客<br>托管平台：GitHub<br>静态博客生成器：Hexo<br>主题：hexo-theme-icarus<br>CI： Travis.CI</p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>统计：Google Analytics, Baidu, 不蒜子<br>评论：gittalk<br>分享：share.js<br>标题永久地址转换： hexo-permalink-pinyin<br>搜索：内置</p><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><ul><li>本地调试时使用Ctrl+C，而非Ctrl+Z–导致端口占用。</li></ul><h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><ul><li>配置CDN</li></ul><h2 id="Change-Log"><a href="#Change-Log" class="headerlink" title="Change Log"></a>Change Log</h2><h3 id="V1-0-0"><a href="#V1-0-0" class="headerlink" title="V1.0.0"></a>V1.0.0</h3><ul><li>初始化Blog并上传Git</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Blog&quot;&gt;&lt;a href=&quot;#Blog&quot; class=&quot;headerlink&quot; title=&quot;Blog&quot;&gt;&lt;/a&gt;Blog&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h
      
    
    </summary>
    
    
      <category term="Blog" scheme="http://qinroc.github.com/TechLog/tags/Blog/"/>
    
  </entry>
  
</feed>
